---------------------------------------- Brute Force : (m*n) ------------------------------------------
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        for i in range(len(haystack) - len(needle)+1):
            if haystack[i] != needle[0]:
                continue
            if haystack[i:i+len(needle)] == needle:
                return i
        return -1

---------------------------------------- Z-Algorithm : O(m+n) ------------------------------------------

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        
        if not needle:
            print('Invalid pattern: Empty')
            return 0
        
        zstring=needle+'$'+haystack
        left=right=0
        zarray=[]
        zarray.append(0)
        
        for i in range(1,len(zstring)):
            
            if i>right :
                left=right=i

                while right<len(zstring) and zstring[right]==zstring[right-left] :
                    right+=1

                zarray.append(right-left)
                right-=1
                
            else :

                temp=i-left

                if zarray[temp]+i<right+1 :
                    zarray.append(zarray[temp])

                else:

                    left=i

                    while right<len(zstring) and zstring[right]==zstring[right-left] :
                        right+=1

                    zarray.append(right-left)
                    right-=1
        
        if len(needle) in zarray :
            for i,j in enumerate(zarray) :
                if j==len(needle):
                    print(f'match found at index {i-(len(needle)+1)}')
        else:
            print('match not found')
        
        return  zarray.index(len(needle))-len(needle)-1 if len(needle) in zarray else -1
